@startuml uno_state_diagram
!theme plain
skinparam stateBackgroundColor #F0F0F0
skinparam stateBorderColor #333333

[*] --> 初始化

state 初始化 {
    [*] --> 读取问题
    读取问题 --> 解析模型
    解析模型 --> 配置选项
    配置选项 --> 选择算法
    选择算法 --> 符号分析
    符号分析 --> [*]
}

初始化 --> 检查初始点

state 检查初始点 <<choice>>
检查初始点 --> 优化阶段 : 可行
检查初始点 --> 可行性恢复阶段 : 不可行

state 优化阶段 {
    [*] --> 计算梯度和Hessian

    state 计算梯度和Hessian {
        评估目标 --> 评估约束
        评估约束 --> 计算雅可比
        计算雅可比 --> 计算拉格朗日Hessian
    }

    计算梯度和Hessian --> 求解子问题

    state 求解子问题 {
        [*] --> 构建KKT系统
        构建KKT系统 --> 因子分解

        state 因子分解 {
            [*] --> 尝试分解
            尝试分解 --> 检查结果

            state 检查结果 <<choice>>
            检查结果 --> 成功 : 分解成功
            检查结果 --> 应用正则化 : 分解失败
            应用正则化 --> 尝试分解
        }

        因子分解 --> 检查惯性

        state 检查惯性 <<choice>>
        检查惯性 --> 求解系统 : 惯性正确
        检查惯性 --> 惯性修正 : 惯性错误

        state 惯性修正 {
            调整正则化参数 --> 重新分解
        }

        惯性修正 --> 因子分解
        求解系统 --> [*]
    }

    求解子问题 --> 全局化步长

    state 全局化步长 {
        [*] --> 选择策略

        state 选择策略 <<choice>>

        选择策略 --> 线搜索
        选择策略 --> 信赖域
        选择策略 --> 滤波器

        state 线搜索 {
            初始步长 --> Armijo测试
            Armijo测试 --> 回溯 : 不满足
            回溯 --> Armijo测试
            Armijo测试 --> 接受步长 : 满足
        }

        state 信赖域 {
            计算比率 --> 判断比率

            state 判断比率 <<choice>>
            判断比率 --> 接受并扩大 : ρ > 0.75
            判断比率 --> 接受 : 0.25 < ρ < 0.75
            判断比率 --> 拒绝并缩小 : ρ < 0.25
        }

        state 滤波器 {
            计算违反度 --> 检查滤波器
            检查滤波器 --> 更新滤波器 : 接受
            检查滤波器 --> 拒绝步 : 拒绝
        }

        线搜索 --> [*]
        信赖域 --> [*]
        滤波器 --> [*]
    }

    全局化步长 --> 更新迭代点
    更新迭代点 --> [*]
}

state 可行性恢复阶段 {
    [*] --> 最小化约束违反

    state 最小化约束违反 {
        构建恢复问题 --> 求解恢复子问题
        求解恢复子问题 --> 恢复步长控制
        恢复步长控制 --> 更新恢复点
    }

    最小化约束违反 --> 检查可行性

    state 检查可行性 <<choice>>
    检查可行性 --> [*] : 恢复成功
    检查可行性 --> 最小化约束违反 : 继续恢复
}

优化阶段 --> 收敛检查
可行性恢复阶段 --> 收敛检查

state 收敛检查 {
    [*] --> 计算残差

    state 计算残差 {
        原始可行性 --> 对偶可行性
        对偶可行性 --> 互补性条件
        互补性条件 --> KKT条件
    }

    计算残差 --> 判断收敛

    state 判断收敛 <<choice>>
    判断收敛 --> 成功 : 满足所有容差
    判断收敛 --> 检查迭代次数 : 未收敛

    state 检查迭代次数 <<choice>>
    检查迭代次数 --> 失败 : 达到最大迭代
    检查迭代次数 --> 继续 : 未达到最大
}

收敛检查 --> 成功 : 收敛
收敛检查 --> 失败 : 超过迭代限制
收敛检查 --> 优化阶段 : 继续优化
收敛检查 --> 可行性恢复阶段 : 需要恢复

state 成功 {
    [*] --> 记录解
    记录解 --> 生成报告
    生成报告 --> [*]
}

state 失败 {
    [*] --> 记录状态
    记录状态 --> 生成错误报告
    生成错误报告 --> [*]
}

成功 --> [*]
失败 --> [*]

@enduml